var re=Object.defineProperty;var oe=(t,e)=>{for(var s in e)re(t,s,{get:e[s],enumerable:!0})};import we from"cors";import"dotenv/config";import se from"express";import ne from"jsonwebtoken";var $=process.env.JWT_SECRET,ae=(t,e,s)=>{let n=t.headers.authorization;if(!n){e.status(401).json({message:"Acesso negado: Cabe\xE7alho de autoriza\xE7\xE3o n\xE3o encontrado."});return}if(!n.startsWith("Bearer ")){e.status(401).json({message:"Formato do token inv\xE1lido. Certifique-se de que o token come\xE7a com 'Bearer '."});return}let r=n.split(" ")[1];if(!r){e.status(401).json({message:"Token n\xE3o fornecido. Certifique-se de que o token est\xE1 presente."});return}try{if(!$)throw new Error("JWT_SECRET n\xE3o est\xE1 definido no ambiente.");let u=ne.verify(r,$);return t.userId=u.id,s()}catch{e.status(401).json({message:"Token inv\xE1lido ou expirado."});return}},H=ae;import{and as I,eq as a,isNull as le}from"drizzle-orm";import me from"express";import"dotenv/config";import{drizzle as ie}from"drizzle-orm/node-postgres";import{Pool as de}from"pg";var W={};oe(W,{alertTable:()=>c,sensorDataTable:()=>h,sensorTable:()=>o,userTable:()=>R});import{foreignKey as z,integer as L,pgTable as M,real as N,serial as U,text as ue,timestamp as q,varchar as y}from"drizzle-orm/pg-core";var R=M("user",{userId:U("user_id").primaryKey(),name:y("name",{length:255}),email:y("email",{length:255}).unique(),password:y("password",{length:255}),creationDate:q("creation_date").defaultNow()}),o=M("sensor",{sensorId:U("sensor_id").primaryKey(),userId:L("user_id").references(()=>R.userId),sensorName:y("sensor_name",{length:255}),location:y("location",{length:255}),installationDate:q("installation_date"),webhookToken:y("weebhook_token",{length:255}).unique()},t=>({fkUser:z({columns:[t.userId],foreignColumns:[R.userId],name:"fk_user"})})),h=M("sensor_data",{sensorDataId:U("sensor_data_id").primaryKey(),sensorId:L("sensor_id").references(()=>o.sensorId),soilHumidity:N("soil_humidity"),levelHumidity:y("level_humidity",{length:50}),temperature:N("temperature"),levelTemperature:y("level_temperature",{length:50}),condutivity:N("condutivity"),levelCondutivity:y("level_condutivity",{length:50}),ph:N("ph"),levelPh:y("level_ph",{length:50}),nitrogen:N("nitrogen"),levelNitrogen:y("level_nitrogen",{length:50}),phosphorus:N("phosphorus"),levelPhosphorus:y("level_phosphorus",{length:50}),potassium:N(" potassium"),levelPotassium:y("level_potassium",{length:50}),dateTime:q("date_time").defaultNow()},t=>({fkSensor:z({columns:[t.sensorId],foreignColumns:[o.sensorId],name:"fk_sensor"})})),c=M("alert",{alertId:U("alert_id").primaryKey(),sensorId:L("sensor_id").references(()=>o.sensorId),message:ue("message"),level:y("level",{length:50}),timestamp:q("timestamp").defaultNow()},t=>({fkSensorAlert:z({columns:[t.sensorId],foreignColumns:[o.sensorId],name:"fk_sensor_alert"})}));if(!process.env.DB_HOST||!process.env.DB_USER||!process.env.DB_PASSWORD||!process.env.DB_NAME)throw new Error("Missing database environment variables");var ce=new de({host:process.env.DB_HOST||"localhost",port:parseInt(process.env.DB_PORT||"5432"),user:process.env.DB_USER||"username",password:process.env.DB_PASSWORD||"password",database:process.env.DB_NAME||"dbname",ssl:process.env.NODE_ENV==="production"}),i=ie(ce,{schema:W});var l=me.Router(),m="Erro no Servidor, tente novamente",pe="N\xE3o encontrado",k="Campos obrigat\xF3rios est\xE3o faltando",v="Sensor n\xE3o encontrado",B="Dado n\xE3o encontrado",Ie={soilHumidity:{ideal:[20,60],intermediate:[[15,20],[60,65]]},temperature:{ideal:[18,30],intermediate:[[15,18],[30,33]]},condutivity:{ideal:[.2,2],intermediate:[[.15,.2],[2,2.5]]},ph:{ideal:[6,7],intermediate:[[5.5,6],[7,7.5]]},nitrogen:{ideal:[20,50],intermediate:[[15,20],[50,60]]},phosphorus:{ideal:[15,40],intermediate:[[10,15],[40,50]]},potassium:{ideal:[100,300],intermediate:[[80,100],[300,350]]}},p=(t,e,s=500)=>(console.error(e),t.status(s).json({message:e}));l.post("/sensors",async(t,e)=>{try{let{sensorName:s,location:n}=t.body,r=t.userId;return!r||!s||!n?e.status(400).json({message:k}):(await i.insert(o).values({userId:r,sensorName:s,location:n,installationDate:new Date}).execute(),e.status(201).json({message:"Sensor cadastrado com sucesso"}))}catch{return p(e,m)}});l.put("/user",async(t,e)=>{try{let s=t.userId,{name:n,email:r}=t.body;return!s||!n||!r?e.status(400).json({message:k}):(await i.update(R).set({name:n,email:r}).where(a(R.userId,s)).execute(),e.status(200).json({message:"Usu\xE1rio atualizado com sucesso"}))}catch{return p(e,m)}});l.delete("/user",async(t,e)=>{try{let s=t.userId;return s?(await i.delete(R).where(a(R.userId,s)).execute(),e.status(200).json({message:"Usu\xE1rio deletado com sucesso"})):e.status(400).json({message:"userId n\xE3o encontrado"})}catch{return p(e,m)}});l.patch("/sensors/:sensorId/assign",async(t,e)=>{try{let{sensorId:s}=t.params,n=t.userId;if(!n)return e.status(400).json({message:"userId n\xE3o encontrado"});if(isNaN(Number(s)))return e.status(400).json({message:"sensorId inv\xE1lido"});let[r]=await i.select().from(o).where(I(a(o.sensorId,Number(s)),le(o.userId))).execute();return r?(await i.update(o).set({userId:n}).where(a(o.sensorId,Number(s))),e.status(200).json({message:"Sensor atribu\xEDdo ao usu\xE1rio com sucesso"})):e.status(404).json({message:"Sensor n\xE3o encontrado ou j\xE1 atribu\xEDdo a um usu\xE1rio"})}catch(s){return console.error(s),p(e,m)}});l.get("/sensors",async(t,e)=>{try{let s=t.userId,n=await i.select().from(o).where(a(o.userId,s)).execute();return n.length===0?e.status(404).json({message:pe}):e.status(200).json(n)}catch{return p(e,m)}});l.get("/sensors/:sensorId",async(t,e)=>{try{let s=Number(t.params.sensorId),n=t.userId,[r]=await i.select().from(o).where(I(a(o.sensorId,s),a(o.userId,n))).execute();return r?e.status(200).json(r):e.status(404).json({message:v})}catch{return p(e,m)}});l.put("/sensors/:sensorId",async(t,e)=>{try{let s=Number(t.params.sensorId),n=t.userId,{sensorName:r,location:u}=t.body;return!r||!u?e.status(400).json({message:"sensorName e location s\xE3o obrigat\xF3rios"}):(await i.update(o).set({sensorName:r,location:u}).where(I(a(o.sensorId,s),a(o.userId,n))).execute()).rowCount===0?e.status(404).json({message:v}):e.status(200).json({message:"Sensor atualizado com sucesso"})}catch(s){return console.error(s),p(e,m)}});l.delete("/sensors/:sensorId",async(t,e)=>{try{let s=Number(t.params.sensorId),n=t.userId;return(await i.delete(o).where(I(a(o.sensorId,s),a(o.userId,n))).execute()).rowCount===0?e.status(404).json({message:v}):e.status(200).json({message:"Sensor deletado com sucesso"})}catch{return p(e,m)}});l.post("/sensors/:sensorId/data",H,async(t,e)=>{try{let s=Number(t.params.sensorId),n=t.userId,{soilHumidity:r,temperature:u,condutivity:d,ph:g,nitrogen:f,phosphorus:w,potassium:j}=t.body;if(r==null||u==null||d==null||g==null||f==null||w==null||j==null)return e.status(400).json({message:k});let[_]=await i.select().from(o).where(I(a(o.sensorId,s),a(o.userId,n))).execute();if(!_)return e.status(404).json({message:v});await i.insert(h).values({sensorId:s,soilHumidity:r,temperature:u,condutivity:d,ph:g,nitrogen:f,phosphorus:w,potassium:j,dateTime:new Date}).execute();let x={soilHumidity:r,temperature:u,condutivity:d,ph:g,nitrogen:f,phosphorus:w,potassium:j},D=[];for(let E of Object.keys(x)){let b=x[E],{ideal:C,intermediate:O}=Ie[E],S;if(b>=C[0]&&b<=C[1])continue;O.some(([A,te])=>b>=A&&b<=te)?S="Alerta":S="Cr\xEDtico";let T=`${E} fora do intervalo ideal (${b})`;await i.insert(c).values({sensorId:s,message:T,level:S,timestamp:new Date}).execute(),D.push({metric:E,level:S,message:T})}return e.status(201).json({message:"Dados inseridos e alertas gerados",alerts:D})}catch(s){return console.log(s),p(e,m)}});l.get("/sensors/:sensorId/data",async(t,e)=>{try{let s=Number(t.params.sensorId),n=t.userId,[r]=await i.select().from(o).where(I(a(o.sensorId,s),a(o.userId,n))).execute();if(!r)return e.status(404).json({message:v});let u=await i.select().from(h).where(a(h.sensorId,s)).execute();return u.length===0?e.status(404).json({message:B}):e.status(200).json(u)}catch(s){return console.error(s),p(e,m)}});l.get("/sensors/:sensorId/data/:dataId",async(t,e)=>{try{let s=Number(t.params.sensorId),n=Number(t.params.dataId),r=t.userId,[u]=await i.select().from(o).where(I(a(o.sensorId,s),a(o.userId,r))).execute();if(!u)return e.status(404).json({message:v});let[d]=await i.select().from(h).where(I(a(h.sensorDataId,n),a(h.sensorId,s))).execute();return d?e.status(200).json(d):e.status(404).json({message:B})}catch{return p(e,m)}});l.put("/sensors/:sensorId/data/:dataId",async(t,e)=>{try{let s=Number(t.params.sensorId),n=Number(t.params.dataId),r=t.userId,{soilHumidity:u,temperature:d,condutivity:g,ph:f,nitrogen:w,phosphorus:j,potassium:_}=t.body,[x]=await i.select().from(o).where(I(a(o.sensorId,s),a(o.userId,r))).execute();return x?(await i.update(h).set({soilHumidity:u,temperature:d,condutivity:g,ph:f,nitrogen:w,phosphorus:j,potassium:_}).where(I(a(h.sensorDataId,n),a(h.sensorId,s))).execute()).rowCount===0?e.status(404).json({message:B}):e.status(200).json({message:"Dado do sensor atualizado com sucesso"}):e.status(404).json({message:v})}catch{return p(e,m)}});l.delete("/sensors/:sensorId/data/:dataId",async(t,e)=>{try{let s=Number(t.params.sensorId),n=Number(t.params.dataId),r=t.userId;return(await i.delete(h).where(I(a(h.sensorDataId,n),a(h.sensorId,s))).execute()).rowCount===0?e.status(404).json({message:B}):e.status(200).json({message:"Dado do sensor deletado com sucesso"})}catch{return p(e,m)}});l.post("/sensors/:sensorId/alert",async(t,e)=>{try{let s=Number(t.params.sensorId),n=t.userId,{message:r,level:u}=t.body;if(!r||!u)return e.status(400).json({message:k});if(isNaN(s))return e.status(400).json({message:"sensorId inv\xE1lido"});let[d]=await i.select().from(o).where(I(a(o.sensorId,s),a(o.userId,n))).execute();return d?(await i.insert(c).values({sensorId:s,message:r,level:u,timestamp:new Date}).execute(),e.status(201).json({message:"Alerta cadastrado com sucesso"})):e.status(404).json({message:v})}catch{return p(e,m)}});l.get("/sensor/:sensorId/alerts",async(t,e)=>{try{let{sensorId:s}=t.params,n=t.userId,r=Number(s);if(isNaN(r))return e.status(400).json({message:"sensorId invalido"});let[u]=await i.select().from(o).where(I(a(o.sensorId,r),a(o.userId,n))).execute();if(!u)return e.status(404).json({message:v});let d=await i.select().from(c).where(a(c.sensorId,r)).execute();return d.length===0?e.status(404).json({message:"Nenhum alerta encontrado para este sensor"}):e.status(200).json(d)}catch{return p(e,m)}});l.get("/sensors/:sensorId/alerts/:alertId",async(t,e)=>{try{let{sensorId:s,alertId:n}=t.params,r=t.userId,u=Number(s),d=Number(n);if(isNaN(u)||isNaN(d))return e.status(400).json({message:"sensorId ou alertId invalido"});let[g]=await i.select().from(o).where(I(a(o.sensorId,u),a(o.userId,r))).execute();if(!g)return e.status(404).json({message:v});let[f]=await i.select().from(c).where(I(a(c.alertId,d),a(c.sensorId,u))).execute();return f?e.status(200).json(f):e.status(404).json({message:"alerta nao encontrado para este sensor"})}catch{return p(e,m)}});l.put("/alert/:alertId",async(t,e)=>{try{let{alertId:s}=t.params,n=t.userId,{message:r,level:u}=t.body,d=Number(s);if(isNaN(d))return e.status(400).json({message:"alertId invalido"});if(!r||!u)return e.status(400).json({message:k});let[g]=await i.select().from(c).innerJoin(o,a(c.sensorId,o.sensorId)).where(I(a(c.alertId,d),a(o.userId,n))).execute();return g?(await i.update(c).set({message:r,level:u}).where(a(c.alertId,d)).execute()).rowCount===0?e.status(404).json({message:"Falha ao atualizar o alerta"}):e.status(200).json({message:"Alerta atualizado com sucesso"}):e.status(404).json({message:"Alerta n\xE3o encontrado ou n\xE3o pertence ao usu\xE1rio"})}catch{return p(e,m)}});l.delete("/alert/:alertId",async(t,e)=>{try{let{alertId:s}=t.params,n=t.userId,r=Number(s);if(isNaN(r))return e.status(400).json({message:"alertId invalido"});let[u]=await i.select().from(c).innerJoin(o,a(c.sensorId,o.sensorId)).where(I(a(c.alertId,r),a(o.userId,n))).execute();return u?(await i.delete(c).where(a(c.alertId,r)).execute()).rowCount===0?e.status(404).json({message:"Falha ao deletar o alerta"}):e.status(200).json({message:"Alerta deletado"}):e.status(404).json({message:"Alerta nao encontrado ou nao pertence ao usuario"})}catch{return p(e,m)}});var G=l;import J from"bcrypt";import{eq as Q}from"drizzle-orm";import he from"express";import X from"jsonwebtoken";var F=he.Router(),Y=process.env.JWT_SECRET,V="Erro no Servidor, tente novamente",ge="Usu\xE1rio n\xE3o encontrado",fe="Senha incorreta",ye="Email e senha s\xE3o obrigat\xF3rios",Re="Campos obrigat\xF3rios est\xE3o faltando",K=(t,e,s=500)=>(console.error(e),t.status(s).json({message:e}));F.post("/webhook/sensors/data",async(t,e)=>{try{let s=t.query.token;if(!s)return e.status(401).json({message:"Token ausente"});let[n]=await i.select().from(o).where(Q(o.webhookToken,s)).execute();if(!n)return e.status(403).json({message:"Token inv\xE1lido"});let{soilHumidity:r,level_humidity:u,temperature:d,level_temperature:g,condutivity:f,level_condutivity:w,ph:j,level_ph:_,nitrogen:x,level_nitrogen:D,phosphorus:E,level_phosphorus:b,potassium:C,level_potassium:O}=t.body;await i.insert(h).values({sensorId:n.sensorId,soilHumidity:r,levelHumidity:u,temperature:d,levelTemperature:g,condutivity:f,levelCondutivity:w,ph:j,levelPh:_,nitrogen:x,levelNitrogen:D,phosphorus:E,levelPhosphorus:b,potassium:C,levelPotassium:O}).execute();let T=[{key:"Umidade do solo",level:u},{key:"Temperatura",level:g},{key:"Condutividade",level:w},{key:"pH",level:_},{key:"Nitrog\xEAnio",level:D},{key:"F\xF3sforo",level:b},{key:"Pot\xE1ssio",level:O}].filter(A=>A.level.toLowerCase()!=="ok").map(A=>({sensorId:n.sensorId,message:`${A.key} fora do intervalo ideal`,level:A.level,timestamp:new Date}));return T.length>0&&await i.insert(c).values(T).execute(),e.status(201).json({message:"Dados recebidos com sucesso",alerts:T})}catch{return K(e,V)}});F.post("/register",async(t,e)=>{try{let{name:s,email:n,password:r}=t.body;if(!s||!n||!r)return e.status(400).json({message:Re});let u=await J.genSalt(10),d=await J.hash(r,u),f=(await i.insert(R).values({name:s,email:n,password:d}).returning().execute())[0],w=X.sign({id:f.userId},Y,{expiresIn:"1h"});e.status(201).json({token:w,name:f.name,email:f.email})}catch{K(e,V)}});F.post("/login",async(t,e)=>{try{let{email:s,password:n}=t.body;if(!s||!n)return e.status(400).json({message:ye});let r=await i.select().from(R).where(Q(R.email,s)).execute();if(r.length===0)return e.status(404).json({message:ge});if(!await J.compare(n,r[0].password))return e.status(401).json({message:fe});let d=r[0],g=X.sign({id:d.userId},Y,{expiresIn:"1h"});e.status(200).json({token:g,name:d.name,email:d.email})}catch{K(e,V)}});var Z=F;var P=se();P.use(we());P.use(se.json());P.use("/api",Z);P.use("/api",H,G);var ee=process.env.PORT||3e3;P.listen(ee,()=>{console.log(`\u2705 API rodando em http://localhost:${ee}/api`)});
