var K=Object.defineProperty;var U=(o,e)=>{for(var s in e)K(o,s,{get:e[s],enumerable:!0})};import P from"express";import J from"express";import j from"bcrypt";import O from"jsonwebtoken";import{eq as W}from"drizzle-orm";import{drizzle as z}from"drizzle-orm/node-postgres";import{Pool as A}from"pg";var v={};U(v,{alertTable:()=>b,sensorDataTable:()=>R,sensorTable:()=>n,userTable:()=>m});import{pgTable as f,serial as g,varchar as c,timestamp as h,real as l,text as _,integer as y,foreignKey as w}from"drizzle-orm/pg-core";var m=f("user",{userId:g("user_id").primaryKey(),name:c("name",{length:255}),email:c("email",{length:255}).unique(),password:c("password",{length:255}),creationDate:h("creation_date").defaultNow()}),n=f("sensor",{sensorId:g("sensor_id").primaryKey(),userId:y("user_id").references(()=>m.userId),sensorName:c("sensor_name",{length:255}),location:c("location",{length:255}),installationDate:h("installation_date")},o=>({fkUser:w({columns:[o.userId],foreignColumns:[m.userId],name:"fk_user"})})),R=f("sensor_data",{sensorDataId:g("sensor_data_id").primaryKey(),sensorId:y("sensor_id").references(()=>n.sensorId),ph:l("ph"),shadingIndex:l("shading_index"),airHumidity:l("air_humidity"),soilHumidity:l("soil_humidity"),soilNutrients:_("soil_nutrients"),temperature:l("temperature"),dateTime:h("date_time").defaultNow()},o=>({fkSensor:w({columns:[o.sensorId],foreignColumns:[n.sensorId],name:"fk_sensor"})})),b=f("alert",{alertId:g("alert_id").primaryKey(),sensorId:y("sensor_id").references(()=>n.sensorId),message:_("message"),level:c("level",{length:50}),timestamp:h("timestamp").defaultNow()},o=>({fkSensorAlert:w({columns:[o.sensorId],foreignColumns:[n.sensorId],name:"fk_sensor_alert"})}));import"dotenv/config";var B=new A({host:process.env.DB_HOST||"localhost",port:parseInt(process.env.DB_PORT||"5432"),user:process.env.DB_USER||"username",password:process.env.DB_PASSWORD||"password",database:process.env.DB_NAME||"dbname",ssl:!0}),i=z(B,{schema:v});var S=J.Router(),F=process.env.JWT_SECRET;S.post("/register",async(o,e)=>{try{let s=o.body,t=await j.genSalt(10),r=await j.hash(s.password,t),a=await i.insert(m).values({name:s.name,email:s.email,password:r}).returning().execute();e.status(201).json(a)}catch(s){e.status(500).json({message:"Erro no Servidor, tente novamente"}),console.error(s)}});S.post("/login",async(o,e)=>{try{let{email:s,password:t}=o.body;if(!s||!t)return e.status(400).json({message:"Email e senha s\xE3o obrigat\xF3rios"});let r=await i.select().from(m).where(W(m.email,s)).execute();if(r.length===0)return e.status(404).json({message:"Usu\xE1rio n\xE3o encontrado"});if(!await j.compare(t,r[0].password))return e.status(401).json({message:"Senha incorreta"});let u=O.sign({id:r[0].userId},F,{expiresIn:"1h"});e.status(200).json(u)}catch(s){e.status(500).json({message:"Erro no Servidor, tente novamente"}),console.error(s)}});var x=S;import M from"express";import{eq as p}from"drizzle-orm";var d=M.Router();d.post("/sensors",async(o,e)=>{try{let{userId:s}=o,{idUser:t,sensorName:r,location:a}=o.body;if((await i.select().from(m).where(p(m.userId,Number(s))).execute()).length===0)return e.status(404).json({message:"Usu\xE1rio n\xE3o encontrado"});if(!t||!r||!a)return e.status(400).json({message:"userId, sensorName e location s\xE3o obrigat\xF3rios"});await i.insert(n).values({userId:t,sensorName:r,location:a,installationDate:new Date}),e.status(201).json({message:"Sensor cadastrado com sucesso"})}catch{e.status(500).json({message:"Erro no Servidor, tente novamente"})}});d.get("/sensors",async(o,e)=>{try{let{userId:s}=o,t=await i.select().from(n).where(p(n.userId,Number(s))).execute();if(t.length===0)return e.status(404).json({message:"Nenhum sensor encontrado"});e.status(200).json(t)}catch{e.status(500).json({message:"Erro no Servidor, tente novamente"})}});d.get("/sensors/:sensorId",async(o,e)=>{try{let{sensorId:s}=o.params,{userId:t}=o,r=await i.select().from(n).where(p(n.userId,Number(t))).execute();if(r.length===0)return e.status(404).json({message:"Nenhum sensor encontrado"});let a=r.filter(u=>u.sensorId===parseInt(s));if(!a)return e.status(404).json({message:"Sensor n\xE3o encontrado"});e.status(200).json(a)}catch{e.status(500).json({message:"Erro no Servidor, tente novamente"})}});d.post("/sensors/:sensorId/data",async(o,e)=>{try{let{sensorId:s}=o.params,{ph:t,shadingIndex:r,airHumidity:a,soilHumidity:u,soilNutrients:k,temperature:q}=o.body,{userId:C}=o,T=await i.select().from(n).where(p(n.userId,Number(C))).execute();if(T.length===0)return e.status(404).json({message:"Nenhum sensor encontrado"});if(!T.filter(H=>H.sensorId===parseInt(s)))return e.status(404).json({message:"Sensor n\xE3o encontrado"});await i.insert(R).values({sensorId:parseInt(s),ph:t,shadingIndex:r,airHumidity:a,soilHumidity:u,soilNutrients:k,temperature:q,dateTime:new Date}).execute(),e.status(200).json({message:"Dados do sensor adicionado "})}catch(s){e.status(500).json({message:"Erro no Servidor, Tente Novamente"}),console.error(s)}});d.post("/sensors/:sensorId/alert",async(o,e)=>{try{let{sensorId:s}=o.params,{message:t,level:r}=o.body;if((await i.select().from(n).where(p(n.sensorId,parseInt(s))).execute()).length===0)return e.status(404).json({message:"Sensor n\xE3o encontrado"});await i.insert(b).values({sensorId:parseInt(s),message:t,level:r,timestamp:new Date}).execute(),e.status(200).json({message:"Alerta adicionado com sucesso"})}catch{e.status(500).json({message:"Erro no Servidor, Tente Novamente"})}});var N=d;import $ from"jsonwebtoken";var G=process.env.JWT_SECRET,L=(o,e,s)=>{let t=o.headers.authorization;if(!t){e.status(401).json({message:"Acesso negado"});return}let r=t.split(" ")[1];if(!r){e.status(401).json({message:"Token n\xE3o fornecido"});return}try{let a=$.verify(r,G);o.userId=a.id,s()}catch{e.status(401).json({message:"Token inv\xE1lido"})}},D=L;import"dotenv/config";var I=P();I.use(P.json());I.use("/api",x);I.use("/api",D,N);var E=process.env.PORT||3e3;I.listen(E,()=>{console.log(`Servidor rodando na porta ${E}`)});
