var re=Object.defineProperty;var oe=(t,e)=>{for(var s in e)re(t,s,{get:e[s],enumerable:!0})};import we from"cors";import"dotenv/config";import Z from"express";import ne from"jsonwebtoken";var V=process.env.JWT_SECRET,ae=(t,e,s)=>{let n=t.headers.authorization;if(!n){e.status(401).json({message:"Acesso negado: Cabe\xE7alho de autoriza\xE7\xE3o n\xE3o encontrado."});return}if(!n.startsWith("Bearer ")){e.status(401).json({message:"Formato do token inv\xE1lido. Certifique-se de que o token come\xE7a com 'Bearer '."});return}let r=n.split(" ")[1];if(!r){e.status(401).json({message:"Token n\xE3o fornecido. Certifique-se de que o token est\xE1 presente."});return}try{if(!V)throw new Error("JWT_SECRET n\xE3o est\xE1 definido no ambiente.");let u=ne.verify(r,V);return t.userId=u.id,s()}catch{e.status(401).json({message:"Token inv\xE1lido ou expirado."});return}},A=ae;import{and as I,eq as a,isNull as me}from"drizzle-orm";import le from"express";import"dotenv/config";import{drizzle as ie}from"drizzle-orm/node-postgres";import{Pool as de}from"pg";var F={};oe(F,{alertTable:()=>c,sensorDataTable:()=>h,sensorTable:()=>o,userTable:()=>R});import{foreignKey as B,integer as U,pgTable as S,real as j,serial as P,text as ue,timestamp as k,varchar as N}from"drizzle-orm/pg-core";var R=S("user",{userId:P("user_id").primaryKey(),name:N("name",{length:255}),email:N("email",{length:255}).unique(),password:N("password",{length:255}),creationDate:k("creation_date").defaultNow()}),o=S("sensor",{sensorId:P("sensor_id").primaryKey(),userId:U("user_id").references(()=>R.userId),sensorName:N("sensor_name",{length:255}),location:N("location",{length:255}),installationDate:k("installation_date"),webhookToken:N("weebhook_token",{length:255}).unique()},t=>({fkUser:B({columns:[t.userId],foreignColumns:[R.userId],name:"fk_user"})})),h=S("sensor_data",{sensorDataId:P("sensor_data_id").primaryKey(),sensorId:U("sensor_id").references(()=>o.sensorId),soilHumidity:j("soil_humidity"),temperature:j("temperature"),condutivity:j("condutivity"),ph:j("ph"),nitrogen:j("nitrogen"),phosphorus:j("phosphorus"),potassium:j(" potassium"),dateTime:k("date_time").defaultNow()},t=>({fkSensor:B({columns:[t.sensorId],foreignColumns:[o.sensorId],name:"fk_sensor"})})),c=S("alert",{alertId:P("alert_id").primaryKey(),sensorId:U("sensor_id").references(()=>o.sensorId),message:ue("message"),level:N("level",{length:50}),timestamp:k("timestamp").defaultNow()},t=>({fkSensorAlert:B({columns:[t.sensorId],foreignColumns:[o.sensorId],name:"fk_sensor_alert"})}));if(!process.env.DB_HOST||!process.env.DB_USER||!process.env.DB_PASSWORD||!process.env.DB_NAME)throw new Error("Missing database environment variables");var ce=new de({host:process.env.DB_HOST||"localhost",port:parseInt(process.env.DB_PORT||"5432"),user:process.env.DB_USER||"username",password:process.env.DB_PASSWORD||"password",database:process.env.DB_NAME||"dbname",ssl:process.env.NODE_ENV==="production"}),i=ie(ce,{schema:F});var m=le.Router(),l="Erro no Servidor, tente novamente",pe="N\xE3o encontrado",_="Campos obrigat\xF3rios est\xE3o faltando",y="Sensor n\xE3o encontrado",O="Dado n\xE3o encontrado",Ie={soilHumidity:{ideal:[20,60],intermediate:[[15,20],[60,65]]},temperature:{ideal:[18,30],intermediate:[[15,18],[30,33]]},condutivity:{ideal:[.2,2],intermediate:[[.15,.2],[2,2.5]]},ph:{ideal:[6,7],intermediate:[[5.5,6],[7,7.5]]},nitrogen:{ideal:[20,50],intermediate:[[15,20],[50,60]]},phosphorus:{ideal:[15,40],intermediate:[[10,15],[40,50]]},potassium:{ideal:[100,300],intermediate:[[80,100],[300,350]]}},p=(t,e,s=500)=>(console.error(e),t.status(s).json({message:e}));m.post("/sensors",async(t,e)=>{try{let{sensorName:s,location:n}=t.body,r=t.userId;return!r||!s||!n?e.status(400).json({message:_}):(await i.insert(o).values({userId:r,sensorName:s,location:n,installationDate:new Date}).execute(),e.status(201).json({message:"Sensor cadastrado com sucesso"}))}catch{return p(e,l)}});m.put("/user",async(t,e)=>{try{let s=t.userId,{name:n,email:r}=t.body;return!s||!n||!r?e.status(400).json({message:_}):(await i.update(R).set({name:n,email:r}).where(a(R.userId,s)).execute(),e.status(200).json({message:"Usu\xE1rio atualizado com sucesso"}))}catch{return p(e,l)}});m.delete("/user",async(t,e)=>{try{let s=t.userId;return s?(await i.delete(R).where(a(R.userId,s)).execute(),e.status(200).json({message:"Usu\xE1rio deletado com sucesso"})):e.status(400).json({message:"userId n\xE3o encontrado"})}catch{return p(e,l)}});m.patch("/sensors/:sensorId/assign",async(t,e)=>{try{let{sensorId:s}=t.params,n=t.userId;if(!n)return e.status(400).json({message:"userId n\xE3o encontrado"});if(isNaN(Number(s)))return e.status(400).json({message:"sensorId inv\xE1lido"});let[r]=await i.select().from(o).where(I(a(o.sensorId,Number(s)),me(o.userId))).execute();return r?(await i.update(o).set({userId:n}).where(a(o.sensorId,Number(s))),e.status(200).json({message:"Sensor atribu\xEDdo ao usu\xE1rio com sucesso"})):e.status(404).json({message:"Sensor n\xE3o encontrado ou j\xE1 atribu\xEDdo a um usu\xE1rio"})}catch(s){return console.error(s),p(e,l)}});m.get("/sensors",async(t,e)=>{try{let s=t.userId,n=await i.select().from(o).where(a(o.userId,s)).execute();return n.length===0?e.status(404).json({message:pe}):e.status(200).json(n)}catch{return p(e,l)}});m.get("/sensors/:sensorId",async(t,e)=>{try{let s=Number(t.params.sensorId),n=t.userId,[r]=await i.select().from(o).where(I(a(o.sensorId,s),a(o.userId,n))).execute();return r?e.status(200).json(r):e.status(404).json({message:y})}catch{return p(e,l)}});m.put("/sensors/:sensorId",async(t,e)=>{try{let s=Number(t.params.sensorId),n=t.userId,{sensorName:r,location:u}=t.body;return!r||!u?e.status(400).json({message:"sensorName e location s\xE3o obrigat\xF3rios"}):(await i.update(o).set({sensorName:r,location:u}).where(I(a(o.sensorId,s),a(o.userId,n))).execute()).rowCount===0?e.status(404).json({message:y}):e.status(200).json({message:"Sensor atualizado com sucesso"})}catch(s){return console.error(s),p(e,l)}});m.delete("/sensors/:sensorId",async(t,e)=>{try{let s=Number(t.params.sensorId),n=t.userId;return(await i.delete(o).where(I(a(o.sensorId,s),a(o.userId,n))).execute()).rowCount===0?e.status(404).json({message:y}):e.status(200).json({message:"Sensor deletado com sucesso"})}catch{return p(e,l)}});m.post("/sensors/:sensorId/data",A,async(t,e)=>{try{let s=Number(t.params.sensorId),n=t.userId,{soilHumidity:r,temperature:u,condutivity:d,ph:g,nitrogen:f,phosphorus:w,potassium:b}=t.body;if(r==null||u==null||d==null||g==null||f==null||w==null||b==null)return e.status(400).json({message:_});let[M]=await i.select().from(o).where(I(a(o.sensorId,s),a(o.userId,n))).execute();if(!M)return e.status(404).json({message:y});await i.insert(h).values({sensorId:s,soilHumidity:r,temperature:u,condutivity:d,ph:g,nitrogen:f,phosphorus:w,potassium:b,dateTime:new Date}).execute();let E={soilHumidity:r,temperature:u,condutivity:d,ph:g,nitrogen:f,phosphorus:w,potassium:b},q=[];for(let D of Object.keys(E)){let v=E[D],{ideal:J,intermediate:ee}=Ie[D],T;if(v>=J[0]&&v<=J[1])continue;ee.some(([se,te])=>v>=se&&v<=te)?T="Alerta":T="Cr\xEDtico";let L=`${D} fora do intervalo ideal (${v})`;await i.insert(c).values({sensorId:s,message:L,level:T,timestamp:new Date}).execute(),q.push({metric:D,level:T,message:L})}return e.status(201).json({message:"Dados inseridos e alertas gerados",alerts:q})}catch{return p(e,l)}});m.get("/sensors/:sensorId/data",async(t,e)=>{try{let s=Number(t.params.sensorId),n=t.userId,[r]=await i.select().from(o).where(I(a(o.sensorId,s),a(o.userId,n))).execute();if(!r)return e.status(404).json({message:y});let u=await i.select().from(h).where(a(h.sensorId,s)).execute();return u.length===0?e.status(404).json({message:O}):e.status(200).json(u)}catch{return p(e,l)}});m.get("/sensors/:sensorId/data/:dataId",async(t,e)=>{try{let s=Number(t.params.sensorId),n=Number(t.params.dataId),r=t.userId,[u]=await i.select().from(o).where(I(a(o.sensorId,s),a(o.userId,r))).execute();if(!u)return e.status(404).json({message:y});let[d]=await i.select().from(h).where(I(a(h.sensorDataId,n),a(h.sensorId,s))).execute();return d?e.status(200).json(d):e.status(404).json({message:O})}catch{return p(e,l)}});m.put("/sensors/:sensorId/data/:dataId",async(t,e)=>{try{let s=Number(t.params.sensorId),n=Number(t.params.dataId),r=t.userId,{soilHumidity:u,temperature:d,condutivity:g,ph:f,nitrogen:w,phosphorus:b,potassium:M}=t.body,[E]=await i.select().from(o).where(I(a(o.sensorId,s),a(o.userId,r))).execute();return E?(await i.update(h).set({soilHumidity:u,temperature:d,condutivity:g,ph:f,nitrogen:w,phosphorus:b,potassium:M}).where(I(a(h.sensorDataId,n),a(h.sensorId,s))).execute()).rowCount===0?e.status(404).json({message:O}):e.status(200).json({message:"Dado do sensor atualizado com sucesso"}):e.status(404).json({message:y})}catch{return p(e,l)}});m.delete("/sensors/:sensorId/data/:dataId",async(t,e)=>{try{let s=Number(t.params.sensorId),n=Number(t.params.dataId),r=t.userId;return(await i.delete(h).where(I(a(h.sensorDataId,n),a(h.sensorId,s))).execute()).rowCount===0?e.status(404).json({message:O}):e.status(200).json({message:"Dado do sensor deletado com sucesso"})}catch{return p(e,l)}});m.post("/sensors/:sensorId/alert",async(t,e)=>{try{let s=Number(t.params.sensorId),n=t.userId,{message:r,level:u}=t.body;if(!r||!u)return e.status(400).json({message:_});if(isNaN(s))return e.status(400).json({message:"sensorId inv\xE1lido"});let[d]=await i.select().from(o).where(I(a(o.sensorId,s),a(o.userId,n))).execute();return d?(await i.insert(c).values({sensorId:s,message:r,level:u,timestamp:new Date}).execute(),e.status(201).json({message:"Alerta cadastrado com sucesso"})):e.status(404).json({message:y})}catch{return p(e,l)}});m.get("/sensor/:sensorId/alerts",async(t,e)=>{try{let{sensorId:s}=t.params,n=t.userId,r=Number(s);if(isNaN(r))return e.status(400).json({message:"sensorId invalido"});let[u]=await i.select().from(o).where(I(a(o.sensorId,r),a(o.userId,n))).execute();if(!u)return e.status(404).json({message:y});let d=await i.select().from(c).where(a(c.sensorId,r)).execute();return d.length===0?e.status(404).json({message:"Nenhum alerta encontrado para este sensor"}):e.status(200).json(d)}catch{return p(e,l)}});m.get("/sensors/:sensorId/alerts/:alertId",async(t,e)=>{try{let{sensorId:s,alertId:n}=t.params,r=t.userId,u=Number(s),d=Number(n);if(isNaN(u)||isNaN(d))return e.status(400).json({message:"sensorId ou alertId invalido"});let[g]=await i.select().from(o).where(I(a(o.sensorId,u),a(o.userId,r))).execute();if(!g)return e.status(404).json({message:y});let[f]=await i.select().from(c).where(I(a(c.alertId,d),a(c.sensorId,u))).execute();return f?e.status(200).json(f):e.status(404).json({message:"alerta nao encontrado para este sensor"})}catch{return p(e,l)}});m.put("/alert/:alertId",async(t,e)=>{try{let{alertId:s}=t.params,n=t.userId,{message:r,level:u}=t.body,d=Number(s);if(isNaN(d))return e.status(400).json({message:"alertId invalido"});if(!r||!u)return e.status(400).json({message:_});let[g]=await i.select().from(c).innerJoin(o,a(c.sensorId,o.sensorId)).where(I(a(c.alertId,d),a(o.userId,n))).execute();return g?(await i.update(c).set({message:r,level:u}).where(a(c.alertId,d)).execute()).rowCount===0?e.status(404).json({message:"Falha ao atualizar o alerta"}):e.status(200).json({message:"Alerta atualizado com sucesso"}):e.status(404).json({message:"Alerta n\xE3o encontrado ou n\xE3o pertence ao usu\xE1rio"})}catch{return p(e,l)}});m.delete("/alert/:alertId",async(t,e)=>{try{let{alertId:s}=t.params,n=t.userId,r=Number(s);if(isNaN(r))return e.status(400).json({message:"alertId invalido"});let[u]=await i.select().from(c).innerJoin(o,a(c.sensorId,o.sensorId)).where(I(a(c.alertId,r),a(o.userId,n))).execute();return u?(await i.delete(c).where(a(c.alertId,r)).execute()).rowCount===0?e.status(404).json({message:"Falha ao deletar o alerta"}):e.status(200).json({message:"Alerta deletado"}):e.status(404).json({message:"Alerta nao encontrado ou nao pertence ao usuario"})}catch{return p(e,l)}});var K=m;import z from"bcrypt";import{eq as $}from"drizzle-orm";import he from"express";import G from"jsonwebtoken";var C=he.Router(),Q=process.env.JWT_SECRET,H="Erro no Servidor, tente novamente",fe="Usu\xE1rio n\xE3o encontrado",ge="Senha incorreta",Re="Email e senha s\xE3o obrigat\xF3rios",ye="Campos obrigat\xF3rios est\xE3o faltando",W=(t,e,s=500)=>(console.error(e),t.status(s).json({message:e}));C.post("/webhook/sensors/data",async(t,e)=>{try{let s=t.query.token;if(!s)return e.status(401).json({message:"Token ausente"});let[n]=await i.select().from(o).where($(o.webhookToken,s)).execute();if(!n)return e.status(403).json({message:"Token inv\xE1lido"});let{soilHumidity:r,temperature:u,condutivity:d,ph:g,nitrogen:f,phosphorus:w,potassium:b}=t.body;return await i.insert(h).values({sensorId:n.sensorId,soilHumidity:r,temperature:u,condutivity:d,ph:g,nitrogen:f,phosphorus:w,potassium:b}).execute(),e.status(201).json({message:"Dados recebidos com sucesso"})}catch{return W(e,H)}});C.post("/register",async(t,e)=>{try{let{name:s,email:n,password:r}=t.body;if(!s||!n||!r)return e.status(400).json({message:ye});let u=await z.genSalt(10),d=await z.hash(r,u),f=(await i.insert(R).values({name:s,email:n,password:d}).returning().execute())[0],w=G.sign({id:f.userId},Q,{expiresIn:"1h"});e.status(201).json({token:w,name:f.name,email:f.email})}catch{W(e,H)}});C.post("/login",async(t,e)=>{try{let{email:s,password:n}=t.body;if(!s||!n)return e.status(400).json({message:Re});let r=await i.select().from(R).where($(R.email,s)).execute();if(r.length===0)return e.status(404).json({message:fe});if(!await z.compare(n,r[0].password))return e.status(401).json({message:ge});let d=r[0],g=G.sign({id:d.userId},Q,{expiresIn:"1h"});e.status(200).json({token:g,name:d.name,email:d.email})}catch{W(e,H)}});var X=C;var x=Z();x.use(we());x.use(Z.json());x.use("/api",X);x.use("/api",A,K);var Y=process.env.PORT||3e3;x.listen(Y,()=>{console.log(`\u2705 API rodando em http://localhost:${Y}/api`)});
