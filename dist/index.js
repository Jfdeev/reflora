"use strict";var z=Object.create;var h=Object.defineProperty;var A=Object.getOwnPropertyDescriptor;var B=Object.getOwnPropertyNames;var J=Object.getPrototypeOf,O=Object.prototype.hasOwnProperty;var W=(s,e)=>{for(var o in e)h(s,o,{get:e[o],enumerable:!0})},F=(s,e,o,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of B(e))!O.call(s,r)&&r!==o&&h(s,r,{get:()=>e[r],enumerable:!(n=A(e,r))||n.enumerable});return s};var d=(s,e,o)=>(o=s!=null?z(J(s)):{},F(e||!s||!s.__esModule?h(o,"default",{value:s,enumerable:!0}):o,s));var b=d(require("express"));var T=d(require("express")),f=d(require("bcrypt")),_=d(require("jsonwebtoken")),x=require("drizzle-orm");var j=require("drizzle-orm/node-postgres"),S=require("pg");var w={};W(w,{alertTable:()=>y,sensorDataTable:()=>I,sensorTable:()=>a,userTable:()=>u});var t=require("drizzle-orm/pg-core"),u=(0,t.pgTable)("user",{userId:(0,t.serial)("user_id").primaryKey(),name:(0,t.varchar)("name",{length:255}),email:(0,t.varchar)("email",{length:255}).unique(),password:(0,t.varchar)("password",{length:255}),creationDate:(0,t.timestamp)("creation_date").defaultNow()}),a=(0,t.pgTable)("sensor",{sensorId:(0,t.serial)("sensor_id").primaryKey(),userId:(0,t.integer)("user_id").references(()=>u.userId),sensorName:(0,t.varchar)("sensor_name",{length:255}),location:(0,t.varchar)("location",{length:255}),installationDate:(0,t.timestamp)("installation_date")},s=>({fkUser:(0,t.foreignKey)({columns:[s.userId],foreignColumns:[u.userId],name:"fk_user"})})),I=(0,t.pgTable)("sensor_data",{sensorDataId:(0,t.serial)("sensor_data_id").primaryKey(),sensorId:(0,t.integer)("sensor_id").references(()=>a.sensorId),ph:(0,t.real)("ph"),shadingIndex:(0,t.real)("shading_index"),airHumidity:(0,t.real)("air_humidity"),soilHumidity:(0,t.real)("soil_humidity"),soilNutrients:(0,t.text)("soil_nutrients"),temperature:(0,t.real)("temperature"),dateTime:(0,t.timestamp)("date_time").defaultNow()},s=>({fkSensor:(0,t.foreignKey)({columns:[s.sensorId],foreignColumns:[a.sensorId],name:"fk_sensor"})})),y=(0,t.pgTable)("alert",{alertId:(0,t.serial)("alert_id").primaryKey(),sensorId:(0,t.integer)("sensor_id").references(()=>a.sensorId),message:(0,t.text)("message"),level:(0,t.varchar)("level",{length:50}),timestamp:(0,t.timestamp)("timestamp").defaultNow()},s=>({fkSensorAlert:(0,t.foreignKey)({columns:[s.sensorId],foreignColumns:[a.sensorId],name:"fk_sensor_alert"})}));var Y=require("dotenv/config"),M=new S.Pool({host:process.env.DB_HOST||"localhost",port:parseInt(process.env.DB_PORT||"5432"),user:process.env.DB_USER||"username",password:process.env.DB_PASSWORD||"password",database:process.env.DB_NAME||"dbname",ssl:!0}),m=(0,j.drizzle)(M,{schema:w});var R=T.default.Router(),$=process.env.JWT_SECRET;R.post("/register",async(s,e)=>{try{let o=s.body,n=await f.default.genSalt(10),r=await f.default.hash(o.password,n),i=await m.insert(u).values({name:o.name,email:o.email,password:r}).returning().execute();e.status(201).json(i)}catch(o){e.status(500).json({message:"Erro no Servidor, tente novamente"}),console.error(o)}});R.post("/login",async(s,e)=>{try{let{email:o,password:n}=s.body;if(!o||!n)return e.status(400).json({message:"Email e senha s\xE3o obrigat\xF3rios"});let r=await m.select().from(u).where((0,x.eq)(u.email,o)).execute();if(r.length===0)return e.status(404).json({message:"Usu\xE1rio n\xE3o encontrado"});if(!await f.default.compare(n,r[0].password))return e.status(401).json({message:"Senha incorreta"});let c=_.default.sign({id:r[0].userId},$,{expiresIn:"1h"});e.status(200).json(c)}catch(o){e.status(500).json({message:"Erro no Servidor, tente novamente"}),console.error(o)}});var N=R;var D=d(require("express")),l=require("drizzle-orm");var p=D.default.Router();p.post("/sensors",async(s,e)=>{try{let{userId:o}=s,{idUser:n,sensorName:r,location:i}=s.body;if((await m.select().from(u).where((0,l.eq)(u.userId,Number(o))).execute()).length===0)return e.status(404).json({message:"Usu\xE1rio n\xE3o encontrado"});if(!n||!r||!i)return e.status(400).json({message:"userId, sensorName e location s\xE3o obrigat\xF3rios"});await m.insert(a).values({userId:n,sensorName:r,location:i,installationDate:new Date}),e.status(201).json({message:"Sensor cadastrado com sucesso"})}catch{e.status(500).json({message:"Erro no Servidor, tente novamente"})}});p.get("/sensors",async(s,e)=>{try{let{userId:o}=s,n=await m.select().from(a).where((0,l.eq)(a.userId,Number(o))).execute();if(n.length===0)return e.status(404).json({message:"Nenhum sensor encontrado"});e.status(200).json(n)}catch{e.status(500).json({message:"Erro no Servidor, tente novamente"})}});p.get("/sensors/:sensorId",async(s,e)=>{try{let{sensorId:o}=s.params,{userId:n}=s,r=await m.select().from(a).where((0,l.eq)(a.userId,Number(n))).execute();if(r.length===0)return e.status(404).json({message:"Nenhum sensor encontrado"});let i=r.filter(c=>c.sensorId===parseInt(o));if(!i)return e.status(404).json({message:"Sensor n\xE3o encontrado"});e.status(200).json(i)}catch{e.status(500).json({message:"Erro no Servidor, tente novamente"})}});p.post("/sensors/:sensorId/data",async(s,e)=>{try{let{sensorId:o}=s.params,{ph:n,shadingIndex:r,airHumidity:i,soilHumidity:c,soilNutrients:C,temperature:H}=s.body,{userId:K}=s,v=await m.select().from(a).where((0,l.eq)(a.userId,Number(K))).execute();if(v.length===0)return e.status(404).json({message:"Nenhum sensor encontrado"});if(!v.filter(U=>U.sensorId===parseInt(o)))return e.status(404).json({message:"Sensor n\xE3o encontrado"});await m.insert(I).values({sensorId:parseInt(o),ph:n,shadingIndex:r,airHumidity:i,soilHumidity:c,soilNutrients:C,temperature:H,dateTime:new Date}).execute(),e.status(200).json({message:"Dados do sensor adicionado "})}catch(o){e.status(500).json({message:"Erro no Servidor, Tente Novamente"}),console.error(o)}});p.post("/sensors/:sensorId/alert",async(s,e)=>{try{let{sensorId:o}=s.params,{message:n,level:r}=s.body;if((await m.select().from(a).where((0,l.eq)(a.sensorId,parseInt(o))).execute()).length===0)return e.status(404).json({message:"Sensor n\xE3o encontrado"});await m.insert(y).values({sensorId:parseInt(o),message:n,level:r,timestamp:new Date}).execute(),e.status(200).json({message:"Alerta adicionado com sucesso"})}catch{e.status(500).json({message:"Erro no Servidor, Tente Novamente"})}});var E=p;var P=d(require("jsonwebtoken")),G=process.env.JWT_SECRET,L=(s,e,o)=>{let n=s.headers.authorization;if(!n){e.status(401).json({message:"Acesso negado"});return}let r=n.split(" ")[1];if(!r){e.status(401).json({message:"Token n\xE3o fornecido"});return}try{let i=P.default.verify(r,G);s.userId=i.id,o()}catch{e.status(401).json({message:"Token inv\xE1lido"})}},k=L;var Ie=require("dotenv/config"),g=(0,b.default)();g.use(b.default.json());g.use("/api",N);g.use("/api",k,E);var q=process.env.PORT||3e3;g.listen(q,()=>{console.log(`Servidor rodando na porta ${q}`)});
